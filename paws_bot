
import discord
from discord.ext import commands
from discord.utils import get
from discord.ext.commands import MissingPermissions, has_permissions, has_any_role
from discord import Member


bot = discord.Client()

bot = commands.Bot(command_prefix='+', description="PawsV1")


@bot.event
async def on_ready():
    print("Paws is started")
#    await bot.change_presence(status=discord.Status.idle, activity=discord.Game("Paws updating..."))
    activity = discord.Game(name="Paws updating...", type=3)
    await bot.change_presence(status=discord.Status.idle, activity=activity)

@bot.command()
async def regles(ctx):
    await ctx.send("""***Malgr√© le fait que ce serveur vous donne des libert√©s, il y a cependant quelques r√®gles √† suivre.\n
Si celle-ci ne sont pas respect√©s, vous recevrez une p√©nalit√© en fonction de la gravit√© de votre acte.***\n
\n
ü§ù ***R√®gle num√©ro 1:***\n
`-Le respect est primordial sur ce serveur! La communication doit TOUJOURS se faire dans une ambiance respectueuse, conviviale et bonne:\n
Veillez √† ne PAS insulter, dire quoi que ce soit de raciste, d'anti-religieux, de discriminatoire ou d'insultant envers qui que ce soit.`\n
\n
üîû ***R√®gle num√©ro 2:***\n
`-Tout contenu pornographique choquant, irrespectueux sera sanctionn√© par BAN PERMANENT sans avertissement et de mani√®re irr√©versible!`\n
\n
üéôÔ∏è ***R√®gle num√©ro 3:***\n
`- L'utilisation abusive (spam, troll not funny, FULL MAJ) des salles √©crites ou vocales est interdite ainsi que la mention @here @everyone ou @ Abonn√©.`\n
\n
üì∞ ***R√®gle num√©ro 4:***\n
`-Il est strictement interdit d'envoyer / mentionner des liens, sites ou applications √† des fins promotionnelles ou non promotionnelles sur les serveurs, en priv√© ou en statut.\n
Vous n'avez pas le droit de donner une cl√© pour un mod ou son lien.`\n
\n
üîí ***R√®gle num√©ro 5:***\n
`-Veuillez ne pas spammer en PV ou sur le serveur les personnes du staff (CE NE SONT PAS DES ROBOTS).`\n
\n
üí∏ ***R√®gle num√©ro 6:***\n
`-Veuillez ne pas vous appeler par des noms insultants, choquants, irrespectueux ou impliquant des jeux de mots (comme: Jean-Cule)!`\n
\n
üåç ***R√®gle num√©ro 7:***\n
`- Assurez-vous de parler un FRAN√áAIS correct (sans insultes).`\n
\n
@everyone""")
    

@bot.command()
async def bienvenue(ctx, nouveau_membre: discord.Member):
    pseudo = nouveau_membre.display_name
    await ctx.send(f"**Bienvenue √† {pseudo} sur le serveur discord ! **")


@bienvenue.error
async def on_command_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("**Tu dois entrez la commande suivante: `+bienvenue @pseudo` **")


@bot.command()
async def serv(ctx):
    server = ctx.guild
    number_text_channels = len(server.text_channels)
    number_voice_channels = len(server.voice_channels)
    server_description = server.description
    number_person = server.member_count
    server_name = server.name
    message = f"**Le serveur `{server_name}` contient `{number_person}` personnes. \nCe serveur poss√®de `{number_text_channels} salons textuels` ainsi que `{number_voice_channels} salon vocale.`**"
    await ctx.send(message)


@bot.command()
async def shoppy(ctx):   
    def check (message):
        return message.author == ctx.message.author and ctx.message.channel == message.channel
    
    shoppy = await bot.wait_for("message", timeout = 10, check = check)
    message = await ctx.send(f"**Le lien  {shoppy.content} va s'afficher. Veuillez r√©agir avec :white_check_mark:, sinon r√©agissez avec :x:** ")
    await message.add_reaction(":white_check_mark:")
    await message.add_reaction(":x:")
    
    def checkEmoji(reaction, user):
        return ctx.message.author == user and message.id == reaction.message.id and (str(reaction.emjoji)) == ":white_check_mark:" or str(reaction.emoji) == ":x:"                                                                             
    try:                                                                                
        reaction, user = await bot.wait_for("reaction_add", timeout = 10, check = checkEmoji)
        if reaction.emoji ==  ":white_check_mark:":
            await ctx.send("https://shoppy.gg/@Paws424")   
        else:
            await ctx.send("Annul√©")
    except:
        await ctx.send("ANNULER")
        
 
        
@bot.command(name='clear')
@commands.has_permissions(administrator=True )
@commands.has_any_role('Admin', 'BOT')
async def clear(ctx, amount=1000):
    await ctx.channel.purge(limit=amount)

     
@clear.error
async def on_command_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("**Tu dois entrez la commande suivante: `+clear [nombre ex= 1]` **")
    else : 

        if isinstance(error, MissingPermissions):
            await ctx.send("**D√©sol√©, tu n'a pas la permission de faire √ßa ! **")


@bot.command(name='warn')
@commands.has_permissions(administrator=True )
@commands.has_any_role('Admin', 'BOT')
async def warn(ctx, user: discord.User, *reason):
    reason = " ".join(reason)
    await ctx.guild.warning(user, reason = reason)
    await ctx.send(f"**{user} a √©t√© `warn` pour '{reason}' !**")


@warn.error
async def on_command_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("**Tu dois entrez la commande suivante: `+warn @pseudo [raison]` **")
    else : 

        if isinstance(error, MissingPermissions):
            await ctx.send("**D√©sol√©, tu n'a pas la permission de faire √ßa ! **")


@bot.command(name='ban')
@commands.has_permissions(administrator=True )
@commands.has_any_role('Admin', 'BOT')
async def ban(ctx, user: discord.User, *reason):
    reason = " ".join(reason)
    await ctx.guild.ban(user, reason = reason)
    await ctx.send(f"**{user} a √©t√© ban pour {reason} !**")


@ban.error
async def on_command_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
         await ctx.send("**Tu dois entrez la commande suivante: `+ban @pseudo [raison]` **")
    else : 

        if isinstance(error, MissingPermissions):
            await ctx.send("**D√©sol√©, tu n'a pas la permission de faire √ßa ! **")


@bot.command(name='unban')
@commands.has_permissions(administrator=True )
@commands.has_any_role('Admin', 'BOT')
async def unban(ctx,user, *reason):
    reason = " ".join(reason)
    userName, userId = user.split("#")
    bannedUsers = await ctx.guild.bans()
    for i in bannedUsers:
        if i.user.name == userName and i.user.discriminator == userId:
            await ctx.guild.unban(i.user, reason = reason)
            await ctx.send(f"**{user} a √©t√© `unban` **")
            return
    await ctx.send(f"**L'utilisateur {user} n'a pas √©t√© trouv√© **")
    
    
@unban.error
async def on_command_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("**Tu dois entrez la commande suivante: `+unban @pseudo` **")
    else : 

        if isinstance(error, MissingPermissions):
            await ctx.send("**D√©sol√©, tu n'a pas la permission de faire √ßa ! **")   
            
@bot.command()
async def banlist(ctx, payload):
    serverID = payload.guild_id
    print(serverID)
    bannedUsers = await bot.get_bans(serverID)
    for user in bannedUsers:
        await bot.send_message(user.name + ' ' + user.id)
    bans = await ctx.guild.bans()
    for ban in bans:
        await ctx.send(ban[0].name + ' ----' + ban[0].id)           
      
        
        
@bot.command(name='bddt')
@commands.has_permissions(administrator=True )
@commands.has_any_role('Admin', 'BOT')
@commands.check(bot)
async def bddt(ctx):
    guild = ctx.guild
    bans = await guild.bans()
    for ban in bans:
        await ctx.send(ban)
        

@banlist.error
async def on_command_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("**Tu dois entrez la commande suivante: `+banlist` **")
    else : 

        if isinstance(error, MissingPermissions):
            await ctx.send("**D√©sol√©, tu n'a pas la permission de faire √ßa ! **")          

###COMMANDE MUTE 4 PARTIES :##############################################################################################################################


async def createMutedRole(ctx):
    mutedRole = await ctx.guild.create_role(name = "Muted", 
                                            permissions = discord.Permissions(send_message = False,
                                            speak = False),
                                            reason = "Creation du role Muted pour mute des utilisateurs.")
    
    for channel in ctx.guild.channels:
        await channel.set_permissions(mutedRole, send_message = False, speak = False,)
        
    return mutedRole


async def getMutedRole(ctx):
    roles = ctx.guild.roles
    for role in roles:
        if role.name == "Muted":
            return role
        
    return await createMutedRole(ctx)
        
        
@bot.command(name='mute')
@commands.has_permissions(administrator=True )
@commands.has_any_role('Admin', 'BOT')
async def mute(ctx, member: discord.Member, *, reason = "Aucune raison n'a √©t√© renseign√©"):
    mutedRole = await getMutedRole(ctx)
    await member.add_roles(mutedRole, reason = reason)
    await ctx.send(f"{member.mention} a √©t√© mute ! {reason} ")


@mute.error
async def on_command_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("**Tu dois entrez la commande suivante: `+mute @pseudo` **")
    else : 

        if isinstance(error, MissingPermissions):
            await ctx.send("**D√©sol√©, tu n'a pas la permission de faire √ßa ! **")        
     
        
@bot.command(name='unmute')
@commands.has_permissions(administrator=True )
@commands.has_any_role('Admin', 'BOT')
async def unmute (ctx, member : discord.Member, *, reason = "Aucune raison"):
    mutedRole = await getMutedRole(ctx)
    await member.remove_role(mutedRole, reason = reason)
    await ctx.send(f"{member.mention} √† √©t√© unmute !")
    
    
@unmute.error
async def on_command_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("**Tu dois entrez la commande suivante: `+unmute @pseudo [raison]` **")
    else : 

        if isinstance(error, MissingPermissions):
            await ctx.send("**D√©sol√©, tu n'a pas la permission de faire √ßa ! **")        
             
        
##############################################################################################################################################################


@bot.command(name='tempmute')
@commands.has_permissions(administrator=True )
@commands.has_any_role('Admin', 'BOT')
async def tempmute(ctx, user: discord.User, *reason, time : int):

    await ctx.send(f"**{user} a √©t√© `mute` pour {reason}**")


@tempmute.error
async def on_command_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("**Tu dois entrez la commande suivante: `+tempmute @pseudo [dur√©e]` **")
    else : 

        if isinstance(error, MissingPermissions):
            await ctx.send("**D√©sol√©, tu n'a pas la permission de faire √ßa ! **")   
 
 
@bot.command(name='kick')
@commands.has_permissions(administrator=True )
@commands.has_any_role('Admin', 'BOT')
async def kick(ctx, user: discord.User, *reason): 
    reason = " ".join(reason)
    await ctx.guild.kick(user, reason = reason)   
    await ctx.send(f"**{user} a √©t√© kick pour {reason} **")


@kick.error
async def on_command_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("**Tu dois entrez la commande suivante: `+kick @pseudo [raison]` **")
    else : 

        if isinstance(error, MissingPermissions):
            await ctx.send("**D√©sol√©, tu n'a pas la permission de faire √ßa ! **")
         
@bot.command(name='tempban')
@commands.has_permissions(administrator=True )
@commands.has_any_role('Admin', 'BOT')
async def tempban(ctx, member: discord.Member):
    pseudo = member.mention
    await ctx.send(f"**{pseudo} a √©t√© tempban pour `[raison]` pendant `[dur√©]` **")


@tempban.error
async def on_command_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("**Tu dois entrez la commande suivante: `+tempban @pseudo [raison] pour [dur√©e]` **")
    else : 

        if isinstance(error, MissingPermissions):
            await ctx.send("**D√©sol√©, tu n'a pas la permission de faire √ßa ! **")



bot.run("OTMzMTQ4NjgxMzgzODUwMDc1.YedUbg.XI8ExbOl7mmyTH--_MEMf5rj8GA")
